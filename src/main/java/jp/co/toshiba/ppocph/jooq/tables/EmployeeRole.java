/*
 * This file is generated by jOOQ.
 */
package jp.co.toshiba.ppocph.jooq.tables;


import java.util.Arrays;
import java.util.List;

import jp.co.toshiba.ppocph.jooq.Keys;
import jp.co.toshiba.ppocph.jooq.Public;
import jp.co.toshiba.ppocph.jooq.tables.records.EmployeeRoleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 社員役割テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeRole extends TableImpl<EmployeeRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.employee_role</code>
     */
    public static final EmployeeRole EMPLOYEE_ROLE = new EmployeeRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeRoleRecord> getRecordType() {
        return EmployeeRoleRecord.class;
    }

    /**
     * The column <code>public.employee_role.employee_id</code>. 社員ID
     */
    public final TableField<EmployeeRoleRecord, Long> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.BIGINT.nullable(false), this, "社員ID");

    /**
     * The column <code>public.employee_role.role_id</code>. 役割ID
     */
    public final TableField<EmployeeRoleRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT.nullable(false), this, "役割ID");

    private EmployeeRole(Name alias, Table<EmployeeRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeRole(Name alias, Table<EmployeeRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("社員役割テーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.employee_role</code> table reference
     */
    public EmployeeRole(String alias) {
        this(DSL.name(alias), EMPLOYEE_ROLE);
    }

    /**
     * Create an aliased <code>public.employee_role</code> table reference
     */
    public EmployeeRole(Name alias) {
        this(alias, EMPLOYEE_ROLE);
    }

    /**
     * Create a <code>public.employee_role</code> table reference
     */
    public EmployeeRole() {
        this(DSL.name("employee_role"), null);
    }

    public <O extends Record> EmployeeRole(Table<O> child, ForeignKey<O, EmployeeRoleRecord> key) {
        super(child, key, EMPLOYEE_ROLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<EmployeeRoleRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_ROLE_PKEY;
    }

    @Override
    public List<UniqueKey<EmployeeRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeeRoleRecord>>asList(Keys.EMPLOYEE_ROLE_PKEY);
    }

    @Override
    public List<ForeignKey<EmployeeRoleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeeRoleRecord, ?>>asList(Keys.EMPLOYEE_ROLE__FK_ER_EMPLOYEES, Keys.EMPLOYEE_ROLE__FK_ER_ROLES);
    }

    private transient Employees _employees;
    private transient Roles _roles;

    public Employees employees() {
        if (_employees == null)
            _employees = new Employees(this, Keys.EMPLOYEE_ROLE__FK_ER_EMPLOYEES);

        return _employees;
    }

    public Roles roles() {
        if (_roles == null)
            _roles = new Roles(this, Keys.EMPLOYEE_ROLE__FK_ER_ROLES);

        return _roles;
    }

    @Override
    public EmployeeRole as(String alias) {
        return new EmployeeRole(DSL.name(alias), this);
    }

    @Override
    public EmployeeRole as(Name alias) {
        return new EmployeeRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeRole rename(String name) {
        return new EmployeeRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeRole rename(Name name) {
        return new EmployeeRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
