/*
 * This file is generated by jOOQ.
 */
package jp.co.toshiba.ppocph.jooq.tables;


import jp.co.toshiba.ppocph.jooq.Public;
import jp.co.toshiba.ppocph.jooq.tables.records.ShutosRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 州都ビュー
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Shutos extends TableImpl<ShutosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.shutos</code>
     */
    public static final Shutos SHUTOS = new Shutos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShutosRecord> getRecordType() {
        return ShutosRecord.class;
    }

    /**
     * The column <code>public.shutos.id</code>.
     */
    public final TableField<ShutosRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.shutos.shuto_name</code>.
     */
    public final TableField<ShutosRecord, String> SHUTO_NAME = createField(DSL.name("shuto_name"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.shutos.pronunciation</code>.
     */
    public final TableField<ShutosRecord, String> PRONUNCIATION = createField(DSL.name("pronunciation"), SQLDataType.VARCHAR(20), this, "");

    private Shutos(Name alias, Table<ShutosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Shutos(Name alias, Table<ShutosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("州都ビュー"), TableOptions.view("create view \"shutos\" as  SELECT ci.id,\n    ci.name AS shuto_name,\n    ci.pronunciation\n   FROM (cities ci\n     JOIN districts di ON ((ci.id = di.shuto_id)))\n  WHERE ((ci.delete_flg)::text = 'approved'::text)\n  ORDER BY ci.id;"));
    }

    /**
     * Create an aliased <code>public.shutos</code> table reference
     */
    public Shutos(String alias) {
        this(DSL.name(alias), SHUTOS);
    }

    /**
     * Create an aliased <code>public.shutos</code> table reference
     */
    public Shutos(Name alias) {
        this(alias, SHUTOS);
    }

    /**
     * Create a <code>public.shutos</code> table reference
     */
    public Shutos() {
        this(DSL.name("shutos"), null);
    }

    public <O extends Record> Shutos(Table<O> child, ForeignKey<O, ShutosRecord> key) {
        super(child, key, SHUTOS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Shutos as(String alias) {
        return new Shutos(DSL.name(alias), this);
    }

    @Override
    public Shutos as(Name alias) {
        return new Shutos(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shutos rename(String name) {
        return new Shutos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shutos rename(Name name) {
        return new Shutos(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
