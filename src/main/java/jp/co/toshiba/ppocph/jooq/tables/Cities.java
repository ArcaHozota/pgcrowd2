/*
 * This file is generated by jOOQ.
 */
package jp.co.toshiba.ppocph.jooq.tables;


import java.util.Arrays;
import java.util.List;

import jp.co.toshiba.ppocph.jooq.Keys;
import jp.co.toshiba.ppocph.jooq.Public;
import jp.co.toshiba.ppocph.jooq.tables.records.CitiesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 都市テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cities extends TableImpl<CitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cities</code>
     */
    public static final Cities CITIES = new Cities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CitiesRecord> getRecordType() {
        return CitiesRecord.class;
    }

    /**
     * The column <code>public.cities.id</code>. ID
     */
    public final TableField<CitiesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "ID");

    /**
     * The column <code>public.cities.name</code>. 名称
     */
    public final TableField<CitiesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(20).nullable(false), this, "名称");

    /**
     * The column <code>public.cities.pronunciation</code>. 読み方
     */
    public final TableField<CitiesRecord, String> PRONUNCIATION = createField(DSL.name("pronunciation"), SQLDataType.VARCHAR(20), this, "読み方");

    /**
     * The column <code>public.cities.population</code>. 人口数量
     */
    public final TableField<CitiesRecord, Long> POPULATION = createField(DSL.name("population"), SQLDataType.BIGINT.nullable(false), this, "人口数量");

    /**
     * The column <code>public.cities.city_flag</code>. 都市フラグ
     */
    public final TableField<CitiesRecord, String> CITY_FLAG = createField(DSL.name("city_flag"), SQLDataType.VARCHAR(40), this, "都市フラグ");

    /**
     * The column <code>public.cities.district_id</code>. 地域ID
     */
    public final TableField<CitiesRecord, Long> DISTRICT_ID = createField(DSL.name("district_id"), SQLDataType.BIGINT.nullable(false), this, "地域ID");

    /**
     * The column <code>public.cities.delete_flg</code>. 論理削除フラグ
     */
    public final TableField<CitiesRecord, String> DELETE_FLG = createField(DSL.name("delete_flg"), SQLDataType.VARCHAR(8).nullable(false), this, "論理削除フラグ");

    private Cities(Name alias, Table<CitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cities(Name alias, Table<CitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("都市テーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cities</code> table reference
     */
    public Cities(String alias) {
        this(DSL.name(alias), CITIES);
    }

    /**
     * Create an aliased <code>public.cities</code> table reference
     */
    public Cities(Name alias) {
        this(alias, CITIES);
    }

    /**
     * Create a <code>public.cities</code> table reference
     */
    public Cities() {
        this(DSL.name("cities"), null);
    }

    public <O extends Record> Cities(Table<O> child, ForeignKey<O, CitiesRecord> key) {
        super(child, key, CITIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<CitiesRecord> getPrimaryKey() {
        return Keys.CITIES_PKEY;
    }

    @Override
    public List<UniqueKey<CitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<CitiesRecord>>asList(Keys.CITIES_PKEY);
    }

    @Override
    public List<ForeignKey<CitiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CitiesRecord, ?>>asList(Keys.CITIES__FK_CITIES_DISTRICTS);
    }

    private transient Districts _districts;

    public Districts districts() {
        if (_districts == null)
            _districts = new Districts(this, Keys.CITIES__FK_CITIES_DISTRICTS);

        return _districts;
    }

    @Override
    public Cities as(String alias) {
        return new Cities(DSL.name(alias), this);
    }

    @Override
    public Cities as(Name alias) {
        return new Cities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cities rename(String name) {
        return new Cities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cities rename(Name name) {
        return new Cities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, Long, String, Long, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
