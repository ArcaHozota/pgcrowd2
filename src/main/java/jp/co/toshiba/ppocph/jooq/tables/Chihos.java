/*
 * This file is generated by jOOQ.
 */
package jp.co.toshiba.ppocph.jooq.tables;


import java.util.Arrays;
import java.util.List;

import jp.co.toshiba.ppocph.jooq.Keys;
import jp.co.toshiba.ppocph.jooq.Public;
import jp.co.toshiba.ppocph.jooq.tables.records.ChihosRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 地方テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Chihos extends TableImpl<ChihosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.chihos</code>
     */
    public static final Chihos CHIHOS = new Chihos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChihosRecord> getRecordType() {
        return ChihosRecord.class;
    }

    /**
     * The column <code>public.chihos.id</code>. ID
     */
    public final TableField<ChihosRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "ID");

    /**
     * The column <code>public.chihos.name</code>. 地方名称
     */
    public final TableField<ChihosRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "地方名称");

    private Chihos(Name alias, Table<ChihosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Chihos(Name alias, Table<ChihosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("地方テーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.chihos</code> table reference
     */
    public Chihos(String alias) {
        this(DSL.name(alias), CHIHOS);
    }

    /**
     * Create an aliased <code>public.chihos</code> table reference
     */
    public Chihos(Name alias) {
        this(alias, CHIHOS);
    }

    /**
     * Create a <code>public.chihos</code> table reference
     */
    public Chihos() {
        this(DSL.name("chihos"), null);
    }

    public <O extends Record> Chihos(Table<O> child, ForeignKey<O, ChihosRecord> key) {
        super(child, key, CHIHOS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ChihosRecord> getPrimaryKey() {
        return Keys.CHIHOS_PKEY;
    }

    @Override
    public List<UniqueKey<ChihosRecord>> getKeys() {
        return Arrays.<UniqueKey<ChihosRecord>>asList(Keys.CHIHOS_PKEY, Keys.CHIHO_NAME_UNIQUE);
    }

    @Override
    public Chihos as(String alias) {
        return new Chihos(DSL.name(alias), this);
    }

    @Override
    public Chihos as(Name alias) {
        return new Chihos(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chihos rename(String name) {
        return new Chihos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chihos rename(Name name) {
        return new Chihos(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
