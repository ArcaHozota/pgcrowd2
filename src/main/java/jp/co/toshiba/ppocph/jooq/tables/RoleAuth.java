/*
 * This file is generated by jOOQ.
 */
package jp.co.toshiba.ppocph.jooq.tables;


import java.util.Arrays;
import java.util.List;

import jp.co.toshiba.ppocph.jooq.Keys;
import jp.co.toshiba.ppocph.jooq.Public;
import jp.co.toshiba.ppocph.jooq.tables.records.RoleAuthRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 役割権限テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleAuth extends TableImpl<RoleAuthRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.role_auth</code>
     */
    public static final RoleAuth ROLE_AUTH = new RoleAuth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoleAuthRecord> getRecordType() {
        return RoleAuthRecord.class;
    }

    /**
     * The column <code>public.role_auth.role_id</code>. 役割ID
     */
    public final TableField<RoleAuthRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT.nullable(false), this, "役割ID");

    /**
     * The column <code>public.role_auth.auth_id</code>. 権限ID
     */
    public final TableField<RoleAuthRecord, Long> AUTH_ID = createField(DSL.name("auth_id"), SQLDataType.BIGINT.nullable(false), this, "権限ID");

    private RoleAuth(Name alias, Table<RoleAuthRecord> aliased) {
        this(alias, aliased, null);
    }

    private RoleAuth(Name alias, Table<RoleAuthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("役割権限テーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.role_auth</code> table reference
     */
    public RoleAuth(String alias) {
        this(DSL.name(alias), ROLE_AUTH);
    }

    /**
     * Create an aliased <code>public.role_auth</code> table reference
     */
    public RoleAuth(Name alias) {
        this(alias, ROLE_AUTH);
    }

    /**
     * Create a <code>public.role_auth</code> table reference
     */
    public RoleAuth() {
        this(DSL.name("role_auth"), null);
    }

    public <O extends Record> RoleAuth(Table<O> child, ForeignKey<O, RoleAuthRecord> key) {
        super(child, key, ROLE_AUTH);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<RoleAuthRecord> getPrimaryKey() {
        return Keys.ROLE_AUTH_PKEY;
    }

    @Override
    public List<UniqueKey<RoleAuthRecord>> getKeys() {
        return Arrays.<UniqueKey<RoleAuthRecord>>asList(Keys.ROLE_AUTH_PKEY);
    }

    @Override
    public List<ForeignKey<RoleAuthRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RoleAuthRecord, ?>>asList(Keys.ROLE_AUTH__FK_RA_ROLES, Keys.ROLE_AUTH__FK_RA_AUTHORITIES);
    }

    private transient Roles _roles;
    private transient Authorities _authorities;

    public Roles roles() {
        if (_roles == null)
            _roles = new Roles(this, Keys.ROLE_AUTH__FK_RA_ROLES);

        return _roles;
    }

    public Authorities authorities() {
        if (_authorities == null)
            _authorities = new Authorities(this, Keys.ROLE_AUTH__FK_RA_AUTHORITIES);

        return _authorities;
    }

    @Override
    public RoleAuth as(String alias) {
        return new RoleAuth(DSL.name(alias), this);
    }

    @Override
    public RoleAuth as(Name alias) {
        return new RoleAuth(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleAuth rename(String name) {
        return new RoleAuth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RoleAuth rename(Name name) {
        return new RoleAuth(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
